--(c) Nvirjskly 2013
--

--Emulates OOP
function inherit(class)
	local n = {}
	function n.new()
		local o = {}
		setmetatable(o, {__index = n})
		return o
	end
	if class then 
		setmetatable(n,{__index=class})
	end
	return n
end


RedObj = inherit(nil)


--Returns the state of the redstone
function RedObj:state() 
	return self.st;
end
function RedObj:setState(s) 
	self.st=s;
end

function RedObj:setInput(side,value)
	
	
end

function RedObj:getOutput(side)
	return false
end

function RedObj:setOutsideOutput(side)
	return false
end



function RedObj:display()
	term.setBackgroundColor(colors.black)
	if self:state() then term.setTextColor(colors.red) else term.setTextColor(colors.white) end
	term.write(" ")
end

function RedObj:name()
	return "RedObj"
end


RedTorch = inherit(RedObj)

--RedTorch.__index = RedTorch

function RedTorch:state()
	return true
end

function RedTorch:display()
	if self:state() then term.setBackgroundColor(colors.red) else term.setBackgroundColor(colors.white) end
	if self:state() then term.setTextColor(colors.white) else term.setTextColor(colors.black) end
	term.write("i")
end

function RedTorch:getOutput(side)
	return true
end



RedWire = inherit(RedObj)
--RedWire.__index = RedWire

function RedWire:state()
	return self.st
end

function RedWire:display()
	if self:state() then term.setBackgroundColor(colors.red) else term.setBackgroundColor(colors.white) end
	if self:state() then term.setTextColor(colors.white) else term.setTextColor(colors.black) end
	term.write("+")
end

function RedWire:setInput(side,value)
	if value then
		self.st = value
	end
end

function RedWire:getOutput(side)
	return self.st
end

function RedWire:name()
	return "RedWire"
end


RedTimer =inherit(RedObj)

function RedTimer:state()
	if not self.t then
		self.t = 1.6 * 20
	end
	if not self.lt then
		self.lt = globalTicks()
	end
	if (globalTicks() - self.lt) >= (self.t-6) then
		self.st = true
	end
	if (globalTicks() - self.lt) >= self.t then
		self.st = false
		self.lt = globalTicks()
	end
	return self.st
end

function RedTimer:display()
	if self:state() then term.setBackgroundColor(colors.red) else term.setBackgroundColor(colors.white) end
	if self:state() then term.setTextColor(colors.white) else term.setTextColor(colors.black) end
	term.write("T")
end

function RedTimer:setInput(side,value)
	--if value then
	--	self.st = value
	--end
end

function RedTimer:getOutput(side)
	return self:state()
end

function RedTimer:name()
	return "RedTimer"
end





RedOutput = inherit(RedObj)

function RedOutput:setOutsideOutput(side)
	self.outputSide = side
	return true
end

function RedOutput:display()
	if self:state() then term.setBackgroundColor(colors.red) else term.setBackgroundColor(colors.white) end
	if self:state() then term.setTextColor(colors.white) else term.setTextColor(colors.black) end
	term.write("O")
	rs.setOutput(self.outputSide,self:state())
end

function RedOutput:setInput(side,value)
	if not self.input then
		self.input = {left = false, right = false, back = false, front = false}
	end
	self.input[side] = value
	self.st = false
	for k,v in pairs(self.input) do
		self.st = self.st or v
	end
end

function RedOutput:getOutput(side)
	return false
end

function RedOutput:state()
	return self.st
end







--TEST
otb = RedOutput.new()
otb:setOutsideOutput("back")

local circuit = {{RedTimer.new(),otb},{RedWire.new(),RedObj.new(), RedObj.new(), RedWire.new()},{RedWire.new()}}

--Display the Circuit

function ctDisplay()
	term.setBackgroundColor(colors.black)
	term.clear()
	term.setCursorPos(1,1)
	for i = 1, #circuit do
		for j = 1, #circuit[i] do
			term.setCursorPos(j,i)
			circuit[i][j]:display()
		end
	end
end

function ctUpdate()
	for i = 1, #circuit do
		for j = 1, #circuit[i] do
			term.setCursorPos(j,i)
			if circuit[i-1] then
				if circuit[i-1][j] then
					circuit[i-1][j]:setInput("front",circuit[i][j]:getOutput("back"))
				end
			end
			if circuit[i+1] then
				if circuit[i+1][j] then
					circuit[i+1][j]:setInput("back",circuit[i][j]:getOutput("front"))
				end
			end
			if circuit[i] then
				if circuit[i][j-1] then
					circuit[i][j-1]:setInput("left",circuit[i][j]:getOutput("right"))
				end
			end
			if circuit[i] then
				if circuit[i][j+1] then
					circuit[i][j+1]:setInput("right",circuit[i][j]:getOutput("left"))
				end
			end
		end
	end
end


function cloneTable(t)
	local new = {}
	for k,v in pairs(t) do
		--if
	end
end

--main loop

function globalTicks()
	return (os.time() * 1000) + (24000 * (os.day()-1))
end

while 1 do
	startTicks = globalTicks()
	
	--do stuff
	ctUpdate()
	ctDisplay()
	
	while globalTicks() == startTicks do
		sleep(0.01)
	end	
end